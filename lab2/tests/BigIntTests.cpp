#include <big_int.h>
#include <gtest/gtest.h>

TEST(BigIntTest, ConstructorFromString) {
    BigInt a("123456789012345");
    std::ostringstream oss;
    oss << a;
    EXPECT_EQ(oss.str(), "123456789012345");

    BigInt b("-987654321098765");
    std::ostringstream oss2;
    oss2 << b;
    EXPECT_EQ(oss2.str(), "-987654321098765");
}

TEST(BigIntTest, ConstructorFromInt) {
    BigInt a(123456789012345LL);
    BigInt b("-123456789012345");
    EXPECT_EQ(a, BigInt("123456789012345"));
}

TEST(BigIntTest, CopyAndMoveConstructor) {
    BigInt a("123456789012345");
    BigInt b = a;
    EXPECT_EQ(a, b);

    BigInt c = std::move(a);
    EXPECT_EQ(c, b);
}

TEST(BigIntTest, ArithmeticAddition) {
    BigInt a("123456789012345");
    BigInt b("987654321098765");
    BigInt sum = a + b;
    EXPECT_EQ(sum, BigInt("1111111110111110"));

    BigInt neg("-123456789012345");
    EXPECT_EQ(a + neg, BigInt("0"));

    BigInt f = BigInt("-1438561783426468137496891347810394678013497613748601934768103471834917903479013476173049768134789671398");
    BigInt s = BigInt("-7563465728354562783465783465283476528346523748652346562347563284652834658234652346523465278345784136538453784657823645762374562783456327456783452384567234563274568234726345");
    BigInt res = f + s;
    EXPECT_EQ(res, BigInt("-7563465728354562783465783465283476528346523748652346562347563284652836096796435772991602775237131946933131798155437394364309330886928162374686931398043407613042703024397743"));
}

TEST(BigIntTest, ArithmeticSubtraction) {
    BigInt a("987654321098765");
    BigInt b("123456789012345");
    EXPECT_EQ(a - b, BigInt("864197532086420"));
    EXPECT_EQ(b - a, BigInt("-864197532086420"));
}

TEST(BigIntTest, plus) {
    BigInt a("89457134869324989867989134086913471937681348763784628794568348524378652783465923846582736578325687854");
    BigInt b("123456789012345");

    BigInt sum = a + b;
    EXPECT_EQ(sum, BigInt("89457134869324989867989134086913471937681348763784628794568348524378652783465923846582860035114700199"));
}

TEST(BigIntTest, plus2) {
    BigInt a("999999999");
    BigInt b("999999999");
    BigInt sum = a + b;
    EXPECT_EQ(sum, BigInt("1999999998"));
}

TEST(BigIntTest, plus3) {
    BigInt a("-999999999");
    BigInt b("-999999999");
    BigInt sum = a + b;
    EXPECT_EQ(sum, BigInt("-1999999998"));
}

TEST(BigIntTest, ArithmeticMultiplication) {
    BigInt a("123456789");
    BigInt b("100000000000000");
    BigInt res = a * b;
    EXPECT_EQ(res, BigInt("12345678900000000000000"));
}

TEST(BigIntTest, ArithmeticDivision) {
    BigInt a("12345678900000000000000");
    BigInt b("123456789");
    EXPECT_EQ(a / b, BigInt("100000000000000"));

    BigInt c("999999999999999");
    EXPECT_EQ(c / BigInt("1"), c);
}

TEST(BigIntTest, DivisionByZeroThrows) {
    BigInt a("123456789012345");
    EXPECT_THROW(a / BigInt("0"), std::runtime_error);
}

TEST(BigIntTest, ModuloOperation) {
    BigInt a("123456789012345");
    BigInt b("100000000000000");
    EXPECT_EQ(a % b, BigInt("23456789012345"));
}

TEST(BigIntTest, ModExp) {
    BigInt base("2");
    BigInt exp("10");
    BigInt mod("1000");
    EXPECT_EQ(base.mod_exp(exp, mod), BigInt("24"));
}

TEST(BigIntTest, ModExp2) {
    BigInt base("384768496932499672839462739476983247239487263446346672346986");
    BigInt exp("823476289347672347867329846");
    BigInt mod("7981467348968");
    EXPECT_EQ(base.mod_exp(exp, mod), BigInt("1291701045560"));
}

TEST(BigIntTest, ModExp_ExponentZero_ReturnsOne) {
    BigInt base("123456789");
    BigInt exponent("0");
    BigInt modulus("98765");

    BigInt result = base.mod_exp(exponent, modulus);

    EXPECT_EQ(result, BigInt("1"));
}

TEST(BigIntTest, KaratsubaMultiply1) {
    BigInt a("123456789012345");
    BigInt b("987654321098765");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, KaratsubaMultiply2) {
    BigInt a("8439963749678234767328623496724836823947629384672839476983274283946729834768923746");
    BigInt b("813749813478691738496781347613746173947617384671");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, KaratsubaMultiply3) {
    BigInt a("26376826261458456218656165848498468518648611839747516145134500900000000000000193418346834967893");
    BigInt b("1734687746137846137813465195678134657183456138045681734160183485610083405613415088138081734756655");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, KaratsubaMultiply4) {
    BigInt a("813947983498618394691398476137476183974719378476718394761348681934789691347617");
    BigInt b("138467981374681789346173468193746748917346193847687847876819346");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, KaratsubaMultiply5) {
    BigInt a("-813947983498618394691398476137476183974719378476718394761348681934789691347617");
    BigInt b("138467981374681789346173468193746748917346193847687847876819346");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, KaratsubaMultiply6) {
    BigInt a("-813947983498618394691398476137476183974719378476718394761348681934789691347617");
    BigInt b("0");
    EXPECT_EQ(a.karatsuba_multiply(b), a * b);
}

TEST(BigIntTest, ComparisonOperators) {
    BigInt a("123456789012345");
    BigInt b("123456789012346");
    EXPECT_TRUE(a < b);
    EXPECT_TRUE(b > a);
    EXPECT_TRUE(a <= b);
    EXPECT_TRUE(b >= a);
    EXPECT_TRUE(a != b);
    EXPECT_TRUE(a == BigInt("123456789012345"));
}

TEST(BigIntTest, Comparison) {
    BigInt a("123456789012345");
    BigInt b("123456789012346");
    EXPECT_FALSE(a >= b);
}

TEST(BigIntTest, IncrementDecrement) {
    BigInt a("123456789012345");
    ++a;
    EXPECT_EQ(a, BigInt("123456789012346"));

    --a;
    EXPECT_EQ(a, BigInt("123456789012345"));
}

TEST(BigIntTest, CompoundAssignmentOperators) {
    BigInt a("100000000000000");
    BigInt b("23456789012345");
    a += b;
    EXPECT_EQ(a, BigInt("123456789012345"));

    a -= b;
    EXPECT_EQ(a, BigInt("100000000000000"));

    a *= BigInt("10");
    EXPECT_EQ(a, BigInt("1000000000000000"));

    a /= BigInt("10");
    EXPECT_EQ(a, BigInt("100000000000000"));
}

TEST(BigIntTest, IsZero) {
    EXPECT_TRUE(BigInt("0").is_zero());
    EXPECT_FALSE(BigInt("100000000000000").is_zero());
    EXPECT_TRUE(BigInt().is_zero());
}

TEST(BigIntTest, Constr_str_empty) {
    BigInt a("");
    EXPECT_TRUE(a.is_zero());
}

TEST(BigIntTest, Constr_str_char) {
    EXPECT_THROW(BigInt("123e23"), std::invalid_argument);
}

TEST(BigIntTest, AbsFunction) {
    BigInt a("-123456789012345");
    EXPECT_EQ(a.abs(), BigInt("123456789012345"));
}

TEST(BigIntTest, InputOutputOperators) {
    std::stringstream ss("123456789012345");
    BigInt a;
    ss >> a;
    EXPECT_EQ(a, BigInt("123456789012345"));
}

TEST(BigIntTest, OutputOperator) {
    BigInt a("10000000000000000000");
    std::ostringstream oss;
    oss << a;
    EXPECT_EQ(oss.str(), "10000000000000000000");

    BigInt b("-10000000009000000000000900090000000900000");
    std::ostringstream oss2;
    oss2 << b;
    EXPECT_EQ(oss2.str(), "-10000000009000000000000900090000000900000");

    BigInt zero("0");
    std::ostringstream oss3;
    oss3 << zero;
    EXPECT_EQ(oss3.str(), "0");
}

TEST(BigIntEquality, BasicEquality) {
    EXPECT_TRUE(BigInt("0") == BigInt("0"));
    EXPECT_TRUE(BigInt("123456") == BigInt("123456"));
    EXPECT_FALSE(BigInt("123456") == BigInt("123457"));
    EXPECT_TRUE(BigInt("123") == BigInt("0123"));
    EXPECT_TRUE(BigInt("0000123") == BigInt("123"));
    EXPECT_FALSE(BigInt("0") == BigInt("1"));
    EXPECT_TRUE(BigInt("0000") == BigInt("0"));
    EXPECT_FALSE(BigInt("978236126357812356") == BigInt(-83657234567));
    EXPECT_FALSE(BigInt("-978236126357812356") == BigInt(83657234567));
}

TEST(BigIntEquality, DifferentLengths) {
    EXPECT_FALSE(BigInt("10000000000000000000000000000000000") == BigInt("100000000000000000000000000000000000"));
    EXPECT_FALSE(BigInt("123456789123456789") == BigInt("1234567891234567890"));
    EXPECT_FALSE(BigInt("99973647539658347634673986893487689374860284728407248678093284786270946") == BigInt("237564765283965892659"));
    EXPECT_TRUE(BigInt("0000000000000000000000000000000000000000000000000123") == BigInt("00000000000000000000000123"));
}

TEST(BigIntLessThan, BasicCases) {
    EXPECT_TRUE(BigInt("0") < BigInt("1"));
    EXPECT_TRUE(BigInt("1") < BigInt("2"));
    EXPECT_TRUE(BigInt("99946387638478963747638476376384760383476987862476273624728468") < BigInt("99946387638478963747638476376384760383476987862476273624728469"));
    EXPECT_TRUE(BigInt("9994638763847896374763847637638476038347698786247627362472846") < BigInt("99946387638478963747638476376384760383476987862476273624728468"));
    EXPECT_FALSE(BigInt("99946387638478963747638476376384760383476987862476273624728468124") < BigInt("99946387638478963747638476376384760383476987862476273624728468"));
    EXPECT_TRUE(BigInt("99946387638478963747638476376384060383476987862476273624728468124") < BigInt("99946387638478963747638476376384760383476987862476273624728468124"));
    EXPECT_FALSE(BigInt("99946387638478963747638476376384060383476987862476273624728468124") < BigInt("99946387638478963747638476376384060383076987862476273624728468124"));
    EXPECT_TRUE(BigInt("-99946387638478963747638476376384060383476987862476273624728468124") < BigInt("99946387638478963747638476376384060383076987862476273624728468124"));
    EXPECT_FALSE(BigInt("99946387638478963747638476376384060383476987862476273624728468124") < BigInt("-99946387638478963747638476376384060383076987862476273624728468124"));
    EXPECT_FALSE(BigInt("-9994638763847890374763828468124") < BigInt("-9994638763847896374763828468124"));
    EXPECT_TRUE(BigInt("-9994638763847890374763828468124") < BigInt("-9994638763847890074763828468124"));
}

TEST(BigIntLessThan, EdgeDigits) {
    EXPECT_TRUE(BigInt("10000000000000000000") < BigInt("10000000000000000001"));
    EXPECT_FALSE(BigInt("10000000099999999990001") < BigInt("10000000099999999990000"));
}

TEST(BigIntComparison, VeryLargeNumbers) {
    std::string a = "1" + std::string(1000, '0');
    std::string b = "1" + std::string(999, '0') + "1";
    EXPECT_FALSE(BigInt(b) < BigInt(a));
    EXPECT_TRUE(BigInt(a) < BigInt(b));
    EXPECT_FALSE(BigInt(a) == BigInt(b));
}

int main(int argc, char **argv) {
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
